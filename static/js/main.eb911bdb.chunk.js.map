{"version":3,"sources":["components/Button.jsx","components/Display.jsx","components/Calculator.jsx","App.js","index.js"],"names":["Button","props","onClick","e","click","label","className","classes","operation","lightGray","darkGray","double","applyClasses","Display","maxLength","value","disabled","initialState","displayValue","clearDisplay","values","current","Calculator","useState","state","setState","setOperation","equals","currentOperation","addDigit","digit","includes","i","newValue","parseFloat","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb911bdb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = (props) => {\r\n  const applyClasses = () => {\r\n    let classes = \"button \";\r\n    classes += props.operation ? \" operation \" : \"\";\r\n    classes += props.lightGray ? \" light-gray \" : \"\";\r\n    classes += props.darkGray ? \" dark-gray \" : \"\";\r\n    classes += props.double ? \" double \" : \"\";\r\n    return classes;\r\n  };\r\n\r\n  return (\r\n    <button\r\n      onClick={(e) => props.click && props.click(props.label)}\r\n      className={applyClasses()}\r\n    >\r\n      {props.label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = (props) => {\r\n  return <input className=\"display\" maxLength=\"9\" value={props.value} disabled/>;\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\nimport \"./Calculator.css\";\r\n\r\nimport Button from \"./Button.jsx\";\r\nimport Display from \"./Display.jsx\";\r\n\r\nconst initialState = {\r\n  displayValue: \"0\",\r\n  clearDisplay: false,\r\n  operation: null,\r\n  values: [0, 0],\r\n  current: 0,\r\n};\r\n\r\nconst Calculator = (props) => {\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const clearMemory = () => {\r\n    setState(initialState);\r\n  };\r\n\r\n  const oppositeSign = () => {\r\n    const i = state.current;\r\n    const newValue = parseFloat(-state.displayValue);\r\n    const values = [...state.values];\r\n    values[i] = newValue;\r\n\r\n    setState({ ...state, displayValue: newValue, values });\r\n  };\r\n\r\n  const percent = () => {\r\n    const i = state.current;\r\n    const newValue = parseFloat(state.displayValue / 100);\r\n    const values = [...state.values];\r\n    values[i] = newValue;\r\n\r\n    setState({ ...state, displayValue: newValue, values });\r\n  };\r\n\r\n  const setOperation = (operation) => {\r\n    if (state.current === 0) {\r\n      setState({ ...state, current: 1, clearDisplay: true, operation });\r\n    } else {\r\n      const equals = operation === \"=\";\r\n      const currentOperation = state.operation;\r\n\r\n      const values = [...state.values];\r\n\r\n      if (currentOperation === \"+\") {\r\n        values[0] = values[0] + values[1];\r\n        values[1] = 0;\r\n      } else if (currentOperation === \"-\") {\r\n        values[0] = values[0] - values[1];\r\n        values[1] = 0;\r\n      } else if (currentOperation === \"*\") {\r\n        values[0] = values[0] * values[1];\r\n        values[1] = 0;\r\n      } else if (currentOperation === \"/\") {\r\n        values[0] = values[0] / values[1];\r\n        values[1] = 0;\r\n      }\r\n\r\n      setState({\r\n        ...state,\r\n        displayValue: values[0],\r\n        operation: equals ? null : operation,\r\n        current: equals ? 0 : 1,\r\n        clearDisplay: !equals,\r\n        values,\r\n      });\r\n    }\r\n  };\r\n\r\n  const addDigit = (digit) => {\r\n    if (digit === \".\" && state.displayValue.includes(\".\")) {\r\n      return;\r\n    }\r\n    // se o display inicial for 0 ele vai apagar o valor do display para substituir posteriormente\r\n    // ou se o clearDisplay estiver true: (display precisando ser limpo)\r\n    const clearDisplay = state.displayValue === \"0\" || state.clearDisplay;\r\n\r\n    // se o clearDisplay for true ou === 0, ele vai limpar o display, se não vai continuar com o estado\r\n    const currentValue = clearDisplay ? \"\" : state.displayValue;\r\n\r\n    // vai somar a string atual que pode ser vazia ou com um display, com o digito digitado\r\n    const displayValue = currentValue + digit;\r\n\r\n    // muda o valor do display no estado e seta o clearDisplay pra falso (não precisa limpar o display)\r\n    setState({ ...state, displayValue, clearDisplay: false });\r\n\r\n    if (digit !== \".\") {\r\n      const i = state.current;\r\n      const newValue = parseFloat(displayValue);\r\n      const values = [...state.values];\r\n      values[i] = newValue;\r\n      setState({ ...state, displayValue, clearDisplay: false, values });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Display value={state.displayValue} />\r\n      <div className=\"buttons\">\r\n        <Button lightGray label=\"AC\" click={clearMemory} />\r\n        <Button lightGray label=\"+/-\" click={oppositeSign} />\r\n        <Button lightGray label=\"%\" click={percent} />\r\n        <Button operation label=\"÷\" click={() => setOperation(\"/\")} />\r\n        <Button darkGray label=\"7\" click={addDigit} />\r\n        <Button darkGray label=\"8\" click={addDigit} />\r\n        <Button darkGray label=\"9\" click={addDigit} />\r\n        <Button operation label=\"×\" click={() => setOperation(\"*\")} />\r\n        <Button darkGray label=\"4\" click={addDigit} />\r\n        <Button darkGray label=\"5\" click={addDigit} />\r\n        <Button darkGray label=\"6\" click={addDigit} />\r\n        <Button operation label=\"-\" click={setOperation} />\r\n        <Button darkGray label=\"1\" click={addDigit} />\r\n        <Button darkGray label=\"2\" click={addDigit} />\r\n        <Button darkGray label=\"3\" click={addDigit} />\r\n        <Button operation label=\"+\" click={setOperation} />\r\n        <Button double darkGray label=\"0\" click={addDigit} />\r\n        <Button darkGray label=\".\" click={addDigit} />\r\n        <Button operation label=\"=\" click={setOperation} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Calculadora</h1>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}